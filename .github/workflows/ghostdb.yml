name: GhostDB

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: vis_test
          POSTGRES_USER: vis
          POSTGRES_PASSWORD: vis
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: "PostgreSQL: configure extensions"
        run: |
          sudo apt install -y postgresql-client
          psql -h localhost -U vis -c "CREATE EXTENSION IF NOT EXISTS ltree;" vis_test
        env:
          PGPASSWORD: vis
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/ci.txt
      - name: Tests
        env:
          PYTHONPATH: ..
          GHOSTDB_DB_DSN: postgresql://vis:vis@localhost:5432/vis_test
        run: |
          python -m pytest \
              --pylama \
              --pylama --bandit \
              --ignore=./ghostdb/alembic \
              --junitxml=tests_results/junit.xml \
              --cov=. --cov-report=xml:tests_artifacts/coverage.xml --cov-report=html:tests_artifacts/coverage/ \
              ghostdb/
        if: ${{ job.status == 'success' }}
      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          path: tests_results/
        if: ${{ always() }}

  build-pkg:
    runs-on: ubuntu-latest
    needs: test

    outputs:
      build-version: ${{ steps.generate-version.outputs.build-version }}

    steps:
      - uses: actions/checkout@v2
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Configure PyPi
        run: |
          echo -e "[distutils]" >> ~/.pypirc
          echo -e "index-servers = vis" >> ~/.pypirc
          echo -e "[vis]" >> ~/.pypirc
          echo -e "repository = ${{ secrets.VIS_PYPI_URL }}" >> ~/.pypirc
          echo -e "username = ghostdb" >> ~/.pypirc
          echo -e "password = ${{ secrets.GHOSTDB_PYPI_PASSWORD }}" >> ~/.pypirc
      - name: Generage Version
        id: generate-version
        run: echo "::set-output name=build-version::dev$(date +%Y%m%d%H%M)"
      - name: Build Package
        run: |
          python setup.py egg_info -b ${{ steps.generate-version.outputs.build-version }} sdist
      - name: Install Twine
        run: |
          python -m pip install twine
      - name: Upload Package
        run: |
          twine upload -r vis dist/*
        if: ${{ github.ref == 'refs/heads/master' }}

  test-integration:
    runs-on: ubuntu-latest
    needs: build-pkg

    if: ${{ github.ref == 'refs/heads/master' }}

    strategy:
      matrix:
        include:
          - repo: 'kraken'
            workflow-id: 3339771
          - repo: 'datagrinder'
            workflow-id: 5913839
          - repo: 'kpigrinder'
            workflow-id: 6417602

    steps:
      - name: Trigger tests on related repositories
        run: |
          curl -u ${{ secrets.CI_INTEGRATION_AUTH }} \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"ref": "master", "inputs": {"ghostdb_ver": "0.1.${{ needs.build-pkg.outputs.build-version }}"}}' \
            https://api.github.com/repos/VetIntegrations/${{ matrix.repo }}/actions/workflows/${{ matrix.workflow-id }}/dispatches
